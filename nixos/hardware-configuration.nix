# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  vars,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  environment.systemPackages = with pkgs; [
    mergerfs
    mergerfs-tools
  ];

  boot.initrd.availableKernelModules = ["xhci_pci" "ehci_pci" "ahci" "usbhid" "uas" "sd_mod"];
  boot.initrd.kernelModules = [];
  boot.kernelModules = ["kvm-intel"];
  boot.extraModulePackages = [];
  boot.loader = {
    systemd-boot = {
      enable = true;
      consoleMode = "auto";
      editor = false; # Security - prevent editing boot parameters
    };
    efi = {
      canTouchEfiVariables = true;
      efiSysMountPoint = "/boot";
    };
    # Disable GRUB completely
    grub.enable = false;
  };
  # Optimize BTRFS settings
  boot.supportedFilesystems = ["btrfs"];
  boot.kernelParams = ["noatime"];

  # Enable periodic BTRFS scrub
  services.btrfs.autoScrub = {
    enable = true;
    interval = "monthly";
    fileSystems = ["/"];
  };

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/6061dd7a-73c0-4c66-b774-e820bc641b42";
    fsType = "btrfs";
    options = ["subvol=@"];
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/6061dd7a-73c0-4c66-b774-e820bc641b42";
    fsType = "btrfs";
    options = ["subvol=@home"];
  };

  fileSystems."/nix" = {
    device = "/dev/disk/by-uuid/6061dd7a-73c0-4c66-b774-e820bc641b42";
    fsType = "btrfs";
    options = ["subvol=@nix"];
  };

  fileSystems."/var/log" = {
    device = "/dev/disk/by-uuid/6061dd7a-73c0-4c66-b774-e820bc641b42";
    fsType = "btrfs";
    options = ["subvol=@var_log"];
  };

  fileSystems."/snapshots" = {
    device = "/dev/disk/by-uuid/6061dd7a-73c0-4c66-b774-e820bc641b42";
    fsType = "btrfs";
    options = ["subvol=@snapshots"];
  };

  fileSystems."/data" = {
    device = "/dev/disk/by-uuid/6061dd7a-73c0-4c66-b774-e820bc641b42";
    fsType = "btrfs";
    options = ["subvol=@data"];
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/4799-425B";
    fsType = "vfat";
    options = ["fmask=0022" "dmask=0022"];
  };

  fileSystems."/boot-backup" = {
    device = "/dev/disk/by-uuid/4799-E764";
    fsType = "vfat";
    options = ["fmask=0022" "dmask=0022"];
  };

  fileSystems."/mnt/disks/disk1" = {
    device = "/dev/disk/by-uuid/fde205ea-dd05-4ea5-a940-49565c1daf53";
    fsType = "ext4";
  };

  fileSystems."/mnt/disks/disk2" = {
    device = "/dev/disk/by-uuid/2c0ac22d-c2f5-4bc7-9aa3-eacde69e85b2";
    fsType = "ext4";
  };

  fileSystems."/mnt/disks/parity1" = {
    device = "/dev/disk/by-uuid/99576c7f-9015-478d-8ee6-8d0eb3c87d34";
    fsType = "ext4";
  };

  fileSystems.${vars.slowArray} = {
    device = "/mnt/disks/disk*";
    options = [
      "defaults"
      "allow_other"
      "moveonenospc=1"
      "minfreespace=250G"
      "func.getattr=newest"
      "fsname=mergerfs_storage"
      # "uid=994"
      # "gid=993"
      # "umask=002"
      "x-mount.mkdir"
    ];
    fsType = "fuse.mergerfs";
  };

  swapDevices = [];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp2s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
